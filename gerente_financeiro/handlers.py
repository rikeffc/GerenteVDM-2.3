import json
import logging
import random
import re
from datetime import datetime, timedelta, timezone
from dateutil.relativedelta import relativedelta
from typing import List, Tuple, Dict, Any
import os
from .services import preparar_contexto_financeiro_completo
import google.generativeai as genai
from sqlalchemy.orm import Session, joinedload
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CallbackQueryHandler, CommandHandler, ContextTypes, ConversationHandler,
    MessageHandler, filters
)

# --- IMPORTS DO PROJETO ---

import config
from database.database import get_db, get_or_create_user, buscar_lancamentos_usuario
from models import Categoria, Lancamento, Subcategoria, Usuario, ItemLancamento, Conta
from .prompts import PROMPT_GERENTE_VDM, PROMPT_INSIGHT_FINAL, SUPER_PROMPT_MAESTRO_CONTEXTUAL

# Importando explicitamente as fun√ß√µes de 'services'
from .services import (
    analisar_comportamento_financeiro,
    buscar_lancamentos_com_relacionamentos,
    definir_perfil_investidor,
    detectar_intencao_e_topico,
    obter_dados_externos,
    preparar_contexto_json
)
from . import services


logger = logging.getLogger(__name__)

# --- ESTADOS DAS CONVERSAS ---
# (O resto do seu arquivo continua a partir daqui)
(AWAIT_GERENTE_QUESTION,) = range(1)
(ASK_NAME,) = range(11, 12)
(ASK_OBJETIVO_DESCRICAO, ASK_OBJETIVO_VALOR, ASK_OBJETIVO_PRAZO) = range(100, 103)

# --- CONSTANTES PARA DETEC√á√ÉO DE INTEN√á√ïES ---
PALAVRAS_LISTA = {
    'lan√ßamentos', 'lancamentos', 'lan√ßamento', 'lancamento', 'transa√ß√µes', 'transacoes', 
    'transacao', 'transa√ß√£o', 'gastos', 'receitas', 'entradas', 'saidas', 'sa√≠das',
    'despesas', 'historico', 'hist√≥rico', 'movimenta√ß√£o', 'movimentacao', 'extrato'
}

PALAVRAS_RESUMO = {
    'resumo', 'relatorio', 'relat√≥rio', 'balan√ßo', 'balanco', 'situacao', 'situa√ß√£o',
    'status', 'como estou', 'como est√°', 'como t√°', 'como ta', 'panorama'
}

PERGUNTAS_ESPECIFICAS = {
    'quanto': ['gastei', 'gasto', 'recebi', 'tenho', 'sobrou', 'economizei'],
    'onde': ['gastei', 'comprei', 'paguei'],
    'quando': ['foi', 'comprei', 'paguei', 'gastei']
}

# --- PROMPT PARA AN√ÅLISE DE IMPACTO ---
PROMPT_ANALISE_IMPACTO = """
**TAREFA:** Voc√™ √© o **Maestro Financeiro**, um assistente de finan√ßas. O usu√°rio pediu uma informa√ß√£o de mercado e agora quer entender o impacto dela.
Seja conciso e direto. Forne√ßa uma an√°lise √∫til e sugest√µes pr√°ticas.

**NOME DO USU√ÅRIO:** {user_name}
**PERFIL DE INVESTIDOR:** {perfil_investidor}
**INFORMA√á√ÉO DE MERCADO:**
{informacao_externa}

**DADOS FINANCEIROS DO USU√ÅRIO (JSON):**
{contexto_json}

**SUA RESPOSTA:**
Gere uma an√°lise em 2 se√ß√µes: "Impacto para Seu Perfil" e "Recomenda√ß√µes", usando o perfil do usu√°rio para personalizar a resposta. Use formata√ß√£o HTML para Telegram (`<b>`, `<i>`, `<code>`).
**NUNCA use a tag <br>. Use quebras de linha normais.**
"""

# --- CLASSES PARA CONTEXTO MELHORADO ---
class ContextoConversa:
    def __init__(self):
        self.historico: List[Dict[str, str]] = []
        self.topicos_recorrentes: Dict[str, int] = {}
        self.ultima_pergunta_tipo: str = ""
        self.dados_cache: Dict[str, Any] = {}
    
    def adicionar_interacao(self, pergunta: str, resposta: str, tipo: str = "geral"):
        self.historico.append({
            'pergunta': pergunta,
            'resposta': resposta[:300],  # Limita o tamanho
            'tipo': tipo,
            'timestamp': datetime.now().isoformat()
        })
        
        if len(self.historico) > 10:
            self.historico = self.historico[-10:]
        
        palavras_chave = self._extrair_palavras_chave(pergunta)
        for palavra in palavras_chave:
            self.topicos_recorrentes[palavra] = self.topicos_recorrentes.get(palavra, 0) + 1
        
        self.ultima_pergunta_tipo = tipo
    
    def _extrair_palavras_chave(self, texto: str) -> List[str]:
        palavras = re.findall(r'\b\w+\b', texto.lower())
        palavras_relevantes = ['uber', 'ifood', 'supermercado', 'lazer', 'restaurante', 
                              'transporte', 'alimentacao', 'alimenta√ß√£o', 'conta', 'salario', 'sal√°rio']
        return [p for p in palavras if p in palavras_relevantes or len(p) > 5]
    
    def get_contexto_formatado(self) -> str:
        if not self.historico:
            return ""
        
        contexto = []
        for item in self.historico[-5:]:
            contexto.append(f"Usu√°rio: {item['pergunta']}")
            contexto.append(f"Maestro: {item['resposta']}")
        
        return "\n".join(contexto)
    
    def tem_topico_recorrente(self, topico: str) -> bool:
        return self.topicos_recorrentes.get(topico.lower(), 0) >= 2

class AnalisadorIntencao:
    @staticmethod
    def detectar_tipo_pergunta(pergunta: str) -> str:
        pergunta_lower = pergunta.lower()

        if "maior despesa" in pergunta_lower or "maior gasto" in pergunta_lower:
            return "maior_despesa"
        
        if any(palavra in pergunta_lower for palavra in ['dolar', 'd√≥lar', 'bitcoin', 'btc', 'selic', 'cotacao', 'cota√ß√£o', 'euro', 'eur']):
            return "dados_externos"
        
        if any(palavra in pergunta_lower for palavra in PALAVRAS_LISTA):
            return "lista_lancamentos"
        
        if any(palavra in pergunta_lower for palavra in PALAVRAS_RESUMO):
            return "resumo_completo"
        
        for interrogativo, verbos in PERGUNTAS_ESPECIFICAS.items():
            if interrogativo in pergunta_lower and any(verbo in pergunta_lower for verbo in verbos):
                return "pergunta_especifica"
        
        if any(palavra in pergunta_lower for palavra in ['oi', 'ol√°', 'bom dia', 'boa tarde', 'e ai', 'e a√≠', 'tudo bem', 'blz']):
            return "conversacional"
        
        
        return "analise_geral"
    
    @staticmethod
    def extrair_limite_lista(pergunta: str) -> int:
        match = re.search(r'\b(\d+)\b', pergunta)
        if match:
            return min(int(match.group(1)), 50)
        
        if any(palavra in pergunta.lower() for palavra in ['√∫ltimo', 'ultimo', '√∫ltima', 'ultima']):
            return 1
        
        return 10

# --- FUN√á√ïES UTILIT√ÅRIAS MELHORADAS ---

async def enviar_texto_em_blocos(bot, chat_id, texto: str, reply_markup=None):
    texto_limpo = texto.strip().replace('<br>', '\n').replace('<br/>', '\n')
    
    if len(texto_limpo) <= 4096:
        try:
            await bot.send_message(
                chat_id=chat_id, 
                text=texto_limpo, 
                parse_mode="HTML", 
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
            return
        except Exception as e:
            logger.error(f"Erro ao enviar mensagem: {e}")
            await bot.send_message(chat_id=chat_id, text=re.sub('<[^<]+?>', '', texto_limpo), reply_markup=reply_markup)
            return
    
    partes = []
    while len(texto_limpo) > 0:
        if len(texto_limpo) <= 4096:
            partes.append(texto_limpo)
            break
        
        corte = texto_limpo[:4096].rfind("\n\n")
        if corte == -1: corte = texto_limpo[:4096].rfind("\n")
        if corte == -1: corte = 4096
        
        partes.append(texto_limpo[:corte])
        texto_limpo = texto_limpo[corte:].strip()
    
    for i, parte in enumerate(partes):
        is_last_part = (i == len(partes) - 1)
        try:
            await bot.send_message(
                chat_id=chat_id, 
                text=parte, 
                parse_mode="HTML", 
                reply_markup=reply_markup if is_last_part else None,
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"Erro ao enviar parte {i}: {e}")
            await bot.send_message(
                chat_id=chat_id, 
                text=re.sub('<[^<]+?>', '', parte),
                reply_markup=reply_markup if is_last_part else None
            )

def parse_action_buttons(text: str) -> tuple[str, InlineKeyboardMarkup | None]:
    match = re.search(r'\[ACTION_BUTTONS:\s*(.*?)\]', text, re.DOTALL | re.IGNORECASE)
    if not match:
        return text, None
    
    clean_text = text[:match.start()].strip()
    button_data_str = match.group(1)
    
    try:
        button_pairs = [pair.strip() for pair in button_data_str.split(';') if pair.strip()]
        keyboard = []
        row = []
        
        for pair in button_pairs:
            parts = pair.split('|')
            if len(parts) == 2:
                button_text, callback_data = parts[0].strip(), parts[1].strip()
                if len(button_text) <= 40:
                    row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
                    if len(row) == 2:
                        keyboard.append(row)
                        row = []
        if row:
            keyboard.append(row)
        
        if keyboard:
            return clean_text, InlineKeyboardMarkup(keyboard)
    
    except Exception as e:
        logger.error(f"Erro ao parsear bot√µes: {e}")
    
    return clean_text, None

def formatar_lancamento_detalhado(lanc: Lancamento) -> str:
    """
    Formata um lan√ßamento no modelo de card "bonito" e padronizado.
    """
    tipo_emoji = "üü¢" if lanc.tipo == 'Entrada' else "üî¥"
    
    card = (
        f"üßæ <b>{lanc.descricao or 'Lan√ßamento'}</b> <i>(ID: {lanc.id})</i>\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üìÖ <b>Data:</b> {lanc.data_transacao.strftime('%d/%m/%Y √†s %H:%M')}\n"
        f"üè∑Ô∏è <b>Tipo:</b> {tipo_emoji} {lanc.tipo}\n"
        f"üí∞ <b>Valor:</b> <code>R$ {lanc.valor:.2f}</code>\n"
        f"üí≥ <b>Pagamento:</b> {lanc.forma_pagamento or 'N/D'}\n"
        f"üìÇ <b>Categoria:</b> {lanc.categoria.nome if lanc.categoria else 'N/A'}"
    )
    return card

async def handle_lista_lancamentos(chat_id: int, context: ContextTypes.DEFAULT_TYPE, parametros: dict):
    """
    Busca e exibe lan√ßamentos com base nos par√¢metros da IA, incluindo data.
    """
    logger.info(f"Executando handle_lista_lancamentos com par√¢metros: {parametros}")
    db = next(get_db())
    try:
        # Converte datas de string para objeto datetime, se existirem
        if 'data_inicio' in parametros:
            parametros['data_inicio'] = datetime.strptime(parametros['data_inicio'], '%Y-%m-%d')
        if 'data_fim' in parametros:
            parametros['data_fim'] = datetime.strptime(parametros['data_fim'], '%Y-%m-%d')

        lancamentos = buscar_lancamentos_usuario(telegram_user_id=chat_id, **parametros)
        
        if not lancamentos:
            await context.bot.send_message(chat_id, "N√£o encontrei nenhum lan√ßamento com os crit√©rios que voc√™ pediu. Tente outros filtros!")
            return

        resposta_final = f"Encontrei {len(lancamentos)} lan√ßamento(s) com os crit√©rios que voc√™ pediu:\n\n"
        cards_formatados = [formatar_lancamento_detalhado(lanc) for lanc in lancamentos]
        resposta_final += "\n\n".join(cards_formatados)

        await enviar_texto_em_blocos(context.bot, chat_id, resposta_final)
    finally:
        db.close()

async def handle_natural_language(update: Update, context: ContextTypes.DEFAULT_TYPE, custom_question: str = None) -> int:
    """
    Handler principal para o /gerente (V5).
    """
    is_callback = update.callback_query is not None
    # ... (l√≥gica para pegar a mensagem e o usu√°rio, como na vers√£o anterior) ...
    if is_callback:
        effective_message = update.callback_query.message
        user_question = custom_question or ""
        effective_user = update.callback_query.from_user
    else:
        effective_message = update.message
        user_question = effective_message.text
        effective_user = update.effective_user

    chat_id = effective_message.chat_id
    await context.bot.send_chat_action(chat_id=chat_id, action='typing')
    
    # ... (l√≥gica do despachante de dados externos, como na vers√£o anterior) ...
    flag_dado_externo, topico_dado_externo = detectar_intencao_e_topico(user_question)
    if flag_dado_externo:
        logger.info(f"Inten√ß√£o de dado externo detectada: {topico_dado_externo}")
        dados = await obter_dados_externos(flag_dado_externo)
        await enviar_texto_em_blocos(context.bot, chat_id, dados.get("texto_html", "N√£o encontrei a informa√ß√£o."))
        return AWAIT_GERENTE_QUESTION

    db = next(get_db())
    try:
        usuario_db = get_or_create_user(db, chat_id, effective_user.full_name)
        
        contexto_financeiro_str = preparar_contexto_financeiro_completo(db, usuario_db)
        
        # ... (l√≥gica para chamar a IA com o prompt, como na vers√£o anterior) ...
        contexto_conversa = obter_contexto_usuario(context)
        historico_conversa_str = contexto_conversa.get_contexto_formatado()
        prompt_final = PROMPT_GERENTE_VDM.format(
            user_name=usuario_db.nome_completo.split(' ')[0] if usuario_db.nome_completo else "voc√™",
            pergunta_usuario=user_question,
            contexto_financeiro_completo=contexto_financeiro_str,
            contexto_conversa=historico_conversa_str
        )
        model = genai.GenerativeModel(config.GEMINI_MODEL_NAME)
        response = await model.generate_content_async(prompt_final)
        resposta_ia = _limpar_resposta_ia(response.text)

        # ... (l√≥gica de decis√£o JSON vs Texto, como na vers√£o anterior) ...
        try:
            dados_funcao = json.loads(resposta_ia)
            if isinstance(dados_funcao, dict) and "funcao" in dados_funcao:
                # ... (l√≥gica de chamada de fun√ß√£o, como na vers√£o anterior) ...
                nome_funcao = dados_funcao.get("funcao")
                parametros = dados_funcao.get("parametros", {})
                if nome_funcao == "listar_lancamentos":
                    await handle_lista_lancamentos(chat_id, context, parametros)
                else:
                    await context.bot.send_message(chat_id, "A IA tentou uma a√ß√£o que n√£o conhe√ßo.")
            else:
                raise json.JSONDecodeError("N√£o √© um JSON de fun√ß√£o", resposta_ia, 0)
        except json.JSONDecodeError:
            # --- CORRE√á√ÉO: Remove a tag [ACTION_BUTTONS] antes de enviar ---
            resposta_texto, reply_markup = parse_action_buttons(resposta_ia)
            # Remove a tag do texto para n√£o ser exibida
            resposta_final_sem_tag = re.sub(r'\[ACTION_BUTTONS.*?\]', '', resposta_texto).strip()

            await enviar_texto_em_blocos(
                context.bot, 
                chat_id, 
                resposta_final_sem_tag, 
                reply_markup=reply_markup
            )
            contexto_conversa.adicionar_interacao(user_question, resposta_final_sem_tag, tipo="gerente_vdm_analise")

    except Exception as e:
        logger.error(f"Erro CR√çTICO em handle_natural_language (V5) para user {chat_id}: {e}", exc_info=True)
        await enviar_resposta_erro(context.bot, chat_id)
    finally:
        db.close()
    
    return AWAIT_GERENTE_QUESTION


def criar_teclado_colunas(botoes: list, colunas: int):
    if not botoes: return []
    return [botoes[i:i + colunas] for i in range(0, len(botoes), colunas)]

def obter_contexto_usuario(context: ContextTypes.DEFAULT_TYPE) -> ContextoConversa:
    if 'contexto_conversa' not in context.user_data:
        context.user_data['contexto_conversa'] = ContextoConversa()
    return context.user_data['contexto_conversa']

# --- HANDLER DE START / HELP (ONBOARDING) ---
HELP_TEXTS = {
    "main": (
        "Ol√°, <b>{user_name}</b>! üëã\n\n"
        "Bem-vindo ao <b>Maestro Financeiro</b>, seu assistente pessoal para dominar suas finan√ßas. "
        "Sou um bot completo, com intelig√™ncia artificial, gr√°ficos, relat√≥rios e muito mais.\n\n"
        "Navegue pelas se√ß√µes abaixo para descobrir tudo que posso fazer por voc√™:"
    ),
    "lancamentos": (
        "<b>üìù Lan√ßamentos e Registros</b>\n\n"
        "A forma mais f√°cil de manter suas finan√ßas em dia.\n\n"
        "üì∏  <b>Leitura Autom√°tica (OCR)</b>\n"
        "   ‚Ä¢ Dentro do comando <code>/lancamento</code>, envie uma <b>foto ou PDF</b> de um cupom fiscal e eu extraio os dados para voc√™.\n\n"
        "üìÑ  <code>/fatura</code>\n"  # <-- LINHA ADICIONADA
        "   ‚Ä¢ Envie o <b>PDF da fatura do seu cart√£o</b> e eu lan√ßo todas as despesas de uma vez, de forma inteligente!\n\n" # <-- LINHA ADICIONADA
        "‚å®Ô∏è  <code>/lancamento</code>\n"
        "   ‚Ä¢ Use para registrar uma <b>Entrada</b> ou <b>Sa√≠da</b> manualmente atrav√©s de um guia passo a passo.\n\n"
        "‚úèÔ∏è  <code>/editar</code>\n"
        "   ‚Ä¢ Use para <b>editar ou apagar</b> um lan√ßamento recente ou busc√°-lo pelo nome."
    ),
    "analise": (
        "<b>üß† An√°lise e Intelig√™ncia</b>\n\n"
        "Transforme seus dados em decis√µes inteligentes.\n\n"
        "üí¨  <code>/gerente</code>\n"
        "   ‚Ä¢ Converse comigo em linguagem natural! Sou uma IA avan√ßada que entende suas perguntas sobre finan√ßas, tem mem√≥ria e te ajuda com insights pr√°ticos.\n"
        "     - <i>\"Quanto gastei com iFood este m√™s?\"</i>\n"
        "     - <i>\"Qual foi minha maior despesa em Lazer?\"</i>\n"
        "     - <i>\"Como est√° minha situa√ß√£o financeira?\"</i>\n"
        "     - <i>\"Cota√ß√£o do d√≥lar hoje\"</i>\n\n"
        "üìà  <code>/grafico</code>\n"
        "   ‚Ä¢ Gere gr√°ficos visuais e interativos de despesas, fluxo de caixa e proje√ß√µes.\n\n"
        "üìÑ  <code>/relatorio</code>\n"
        "   ‚Ä¢ Gere um <b>relat√≥rio profissional em PDF</b> com o resumo completo do seu m√™s."
    ),
    "planejamento": (
        "<b>üéØ Metas e Agendamentos</b>\n\n"
        "Planeje seu futuro e automatize sua vida financeira.\n\n"
        "üèÜ  <code>/novameta</code>\n"
        "   ‚Ä¢ Crie metas de economia (ex: 'Viagem dos Sonhos') e acompanhe seu progresso.\n\n"
        "üìä  <code>/metas</code>\n"
        "   ‚Ä¢ Veja o andamento de todas as suas metas ativas com barras de progresso.\n\n"
        "üóìÔ∏è  <code>/agendar</code>\n"
        "   ‚Ä¢ Automatize suas contas! Agende despesas e receitas recorrentes (sal√°rio, aluguel) ou parcelamentos. Eu te lembrarei e lan√ßarei tudo automaticamente."
    ),
    "config": (
        "<b>‚öôÔ∏è Configura√ß√µes e Ferramentas</b>\n\n"
        "Deixe o bot com a sua cara e gerencie suas prefer√™ncias.\n\n"
        "üë§  <code>/configurar</code>\n"
        "   ‚Ä¢ Gerencie suas <b>contas</b>, <b>cart√µes</b>, defina seu <b>perfil de investidor</b> para receber dicas personalizadas e altere o <b>hor√°rio dos lembretes</b>.\n\n"
        "üö®  <code>/alerta [valor]</code>\n"
        "   ‚Ä¢ Defina um limite de gastos mensal (ex: <code>/alerta 1500</code>). Eu te avisarei se voc√™ ultrapassar esse valor.\n\n"
        "üí¨  <code>/contato</code>\n" 
        "   ‚Ä¢ Fale com o desenvolvedor! Envie <b>sugest√µes</b>, <b>d√∫vidas</b> ou me pague um <b>caf√© via PIX</b> para apoiar o projeto.\n\n"
        "üóëÔ∏è  <code>/apagartudo</code>\n"
        "   ‚Ä¢ <b>Exclui permanentemente todos os seus dados</b> do bot. Use com extrema cautela!\n\n"
        "‚Ü©Ô∏è  <code>/cancelar</code>\n"
        "   ‚Ä¢ Use a qualquer momento para interromper uma opera√ß√£o em andamento."
    )
}

def get_help_keyboard(current_section: str = "main") -> InlineKeyboardMarkup:
    """
    Gera o teclado de navega√ß√£o interativo para o menu de ajuda.
    Os bot√µes s√£o dispostos de forma inteligente para melhor visualiza√ß√£o.
    """
    keyboard = [
        [
            InlineKeyboardButton("üìù Lan√ßamentos", callback_data="help_lancamentos"),
            InlineKeyboardButton("üß† An√°lise", callback_data="help_analise"),
        ],
        [
            InlineKeyboardButton("üéØ Planejamento", callback_data="help_planejamento"),
            InlineKeyboardButton("‚öôÔ∏è Ferramentas", callback_data="help_config"),
        ]
    ]
    
    # Adiciona o bot√£o de "Voltar" apenas se n√£o estivermos no menu principal
    if current_section != "main":
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è Voltar ao Menu Principal", callback_data="help_main")])
    
    return InlineKeyboardMarkup(keyboard)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Envia a mensagem de ajuda principal e interativa ao receber o comando /help.
    Busca o nome do usu√°rio para uma sauda√ß√£o personalizada.
    """
    user = update.effective_user
    db = next(get_db())
    try:
        # Busca o nome do usu√°rio no banco para personalizar a mensagem
        usuario_db = db.query(Usuario).filter(Usuario.telegram_id == user.id).first()
        # Se n√£o encontrar no DB, usa o nome do Telegram como fallback
        user_name = usuario_db.nome_completo.split(' ')[0] if usuario_db and usuario_db.nome_completo else user.first_name
        
        text = HELP_TEXTS["main"].format(user_name=user_name)
        keyboard = get_help_keyboard("main")
        
        await update.message.reply_html(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Erro no help_command para o usu√°rio {user.id}: {e}", exc_info=True)
        # Mensagem de fallback caso ocorra um erro
        await update.message.reply_text("Ol√°! Sou seu Maestro Financeiro. Use os bot√µes para explorar minhas fun√ß√µes.")
    finally:
        db.close()

async def help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Processa os cliques nos bot√µes do menu de ajuda, editando a mensagem
    para mostrar a se√ß√£o correspondente.
    """
    query = update.callback_query
    await query.answer() # Responde ao clique para o Telegram saber que foi processado

    try:
        # Extrai a se√ß√£o do callback_data (ex: "help_analise" -> "analise")
        section = query.data.split('_')[1]

        if section in HELP_TEXTS:
            text = HELP_TEXTS[section]
            
            # Se a se√ß√£o for a principal, personaliza com o nome do usu√°rio novamente
            if section == "main":
                user = query.from_user
                db = next(get_db())
                try:
                    usuario_db = db.query(Usuario).filter(Usuario.telegram_id == user.id).first()
                    user_name = usuario_db.nome_completo.split(' ')[0] if usuario_db and usuario_db.nome_completo else user.first_name
                    text = text.format(user_name=user_name)
                finally:
                    db.close()

            keyboard = get_help_keyboard(section)
            
            # Edita a mensagem original com o novo texto e teclado
            await query.edit_message_text(text, parse_mode='HTML', reply_markup=keyboard)
            
    except (IndexError, KeyError) as e:
        logger.error(f"Erro no help_callback: Se√ß√£o n√£o encontrada. query.data: {query.data}. Erro: {e}")
        await query.answer("Erro: Se√ß√£o de ajuda n√£o encontrada.", show_alert=True)
    except Exception as e:
        logger.error(f"Erro inesperado no help_callback: {e}", exc_info=True)
        await query.answer("Ocorreu um erro ao carregar a ajuda. Tente novamente.", show_alert=True)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    db = next(get_db())
    try:
        user = get_or_create_user(db, update.effective_user.id, update.effective_user.full_name)
        if user and user.nome_completo:
            await help_command(update, context)
            return ConversationHandler.END
        else:
            await update.message.reply_text("Ol√°! Sou seu assistente financeiro. Para uma experi√™ncia mais personalizada, como posso te chamar?")
            return ASK_NAME
    finally:
        db.close()

async def receive_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_name = update.message.text.strip()
    user_info = update.effective_user
    db = next(get_db())
    try:
        usuario_db = get_or_create_user(db, user_info.id, user_name)
        usuario_db.nome_completo = user_name
        db.commit()
        await update.message.reply_text(f"Prazer em conhecer, {user_name.split(' ')[0]}! üòä")
        await help_command(update, context)
    finally:
        db.rollback()
        db.close()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update.message or (update.callback_query and update.callback_query.message)
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("Opera√ß√£o cancelada. ‚úÖ")
    else:
        await message.reply_text("Opera√ß√£o cancelada. ‚úÖ")
    context.user_data.clear()
    return ConversationHandler.END

# --- HANDLER DE GERENTE FINANCEIRO (IA) - VERS√ÉO MELHORADA ---

async def start_gerente(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    db = next(get_db())
    try:
        user = get_or_create_user(db, update.effective_user.id, update.effective_user.full_name)
        user_name = user.nome_completo.split(' ')[0] if user.nome_completo else "voc√™"
        contexto = obter_contexto_usuario(context)
        
        if contexto.historico:
            mensagem = f"E a√≠, {user_name}! üòä O que vamos analisar hoje?"
        else:
            mensagem = f"""
E a√≠, {user_name}! Tudo tranquilo? üöÄ‚ú®  
Sou o <b>Maestro Financeiro</b> üé©, seu super parceiro na aventura de organizar as finan√ßas! üí∞  
Sinta-se √† vontade para perguntar o que quiser: <i>"Quanto gastei no cart√£o?", "Qual √© o saldo das minhas contas?", "O que est√° por vir?"</i>  
Estou aqui para transformar sua vida financeira em uma experi√™ncia leve e inteligente! üåü  
<b>Pronto para desbravar o mundo das suas finan√ßas hoje?</b>
"""
                        
        await update.message.reply_html(mensagem)
        return AWAIT_GERENTE_QUESTION
    finally:
        db.close()

async def handle_natural_language(update: Update, context: ContextTypes.DEFAULT_TYPE, custom_question: str = None) -> int:
    """
    Handler principal para o /gerente (V4).
    1. Despacha para cota√ß√µes externas.
    2. Envia para a IA.
    3. Executa fun√ß√µes com base na resposta da IA (JSON) ou envia a an√°lise de texto.
    """
    # --- Corre√ß√£o do Bug de Bot√£o (AttributeError) ---
    is_callback = update.callback_query is not None
    if is_callback:
        effective_message = update.callback_query.message
        user_question = custom_question or ""
        effective_user = update.callback_query.from_user
    else:
        effective_message = update.message
        user_question = effective_message.text
        effective_user = update.effective_user

    chat_id = effective_message.chat_id
    await context.bot.send_chat_action(chat_id=chat_id, action='typing')

    # --- Despachante: Verifica primeiro se √© uma cota√ß√£o ---
    flag_dado_externo, topico_dado_externo = detectar_intencao_e_topico(user_question)
    if flag_dado_externo:
        logger.info(f"Inten√ß√£o de dado externo detectada: {topico_dado_externo}")
        dados = await obter_dados_externos(flag_dado_externo)
        await enviar_texto_em_blocos(context.bot, chat_id, dados.get("texto_html", "N√£o encontrei a informa√ß√£o."))
        return AWAIT_GERENTE_QUESTION

    # --- Se n√£o for cota√ß√£o, continua com a IA financeira ---
    db = next(get_db())
    contexto_conversa = obter_contexto_usuario(context)
    
    try:
        usuario_db = get_or_create_user(db, chat_id, effective_user.full_name)
        
        contexto_financeiro_str = preparar_contexto_financeiro_completo(db, usuario_db)
        historico_conversa_str = contexto_conversa.get_contexto_formatado()

        prompt_final = PROMPT_GERENTE_VDM.format(
            user_name=usuario_db.nome_completo.split(' ')[0] if usuario_db.nome_completo else "voc√™",
            pergunta_usuario=user_question,
            contexto_financeiro_completo=contexto_financeiro_str,
            contexto_conversa=historico_conversa_str
        )
        
        model = genai.GenerativeModel(config.GEMINI_MODEL_NAME)
        response = await model.generate_content_async(prompt_final)
        resposta_ia = _limpar_resposta_ia(response.text) # Limpa a resposta
        
        # --- L√≥gica de Decis√£o: √â uma chamada de fun√ß√£o (JSON) ou uma an√°lise (texto)? ---
        try:
            # Tenta decodificar a resposta como JSON
            dados_funcao = json.loads(resposta_ia)
            if isinstance(dados_funcao, dict) and "funcao" in dados_funcao:
                nome_funcao = dados_funcao.get("funcao")
                parametros = dados_funcao.get("parametros", {})
                
                if nome_funcao == "listar_lancamentos":
                    await handle_lista_lancamentos(chat_id, context, parametros)
                else:
                    logger.warning(f"IA tentou chamar uma fun√ß√£o desconhecida: {nome_funcao}")
                    await context.bot.send_message(chat_id, "A IA tentou uma a√ß√£o que n√£o conhe√ßo.")
            else:
                # Se n√£o for um JSON de fun√ß√£o, trata como texto normal.
                raise json.JSONDecodeError("N√£o √© um JSON de fun√ß√£o", resposta_ia, 0)

        except json.JSONDecodeError:
            # Se n√£o for JSON, √© uma an√°lise de texto. Envia para o usu√°rio.
            resposta_texto, reply_markup = parse_action_buttons(resposta_ia)
            await enviar_texto_em_blocos(context.bot, chat_id, resposta_texto, reply_markup=reply_markup)
            contexto_conversa.adicionar_interacao(user_question, resposta_texto, tipo="gerente_vdm_analise")

    except Exception as e:
        logger.error(f"Erro CR√çTICO em handle_natural_language (V4) para user {chat_id}: {e}", exc_info=True)
        await enviar_resposta_erro(context.bot, chat_id)
    finally:
        db.close()
    
    return AWAIT_GERENTE_QUESTION

async def handle_dados_externos(update, context, user_question, usuario_db, contexto):
    flag, topico = detectar_intencao_e_topico(user_question)
    
    if flag:
        dados = await obter_dados_externos(flag)
        keyboard = [[InlineKeyboardButton("üìà Como isso me afeta?", callback_data=f"analise_{flag}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        resposta_texto = dados.get("texto_html", "N√£o encontrei a informa√ß√£o.")
        await enviar_texto_em_blocos(context.bot, usuario_db.telegram_id, resposta_texto, reply_markup=reply_markup)
        contexto.adicionar_interacao(user_question, resposta_texto, "dados_externos")

def _parse_filtros_lancamento(texto: str, db: Session, user_id: int) -> dict:
    """
    Extrai filtros de tipo, categoria, conta/forma de pagamento e data de um texto.
    """
    filtros = {}
    texto_lower = texto.lower()
    
    # --- CORRE√á√ÉO: Definimos a lista no escopo principal da fun√ß√£o ---
    formas_pagamento_comuns = ['pix', 'cr√©dito', 'debito', 'dinheiro']

    # --- Filtro de TIPO ---
    PALAVRAS_GASTOS = ['gastos', 'despesas', 'sa√≠das', 'saidas', 'paguei']
    PALAVRAS_RECEITAS = ['receitas', 'entradas', 'ganhei', 'recebi']

    if any(palavra in texto_lower for palavra in PALAVRAS_GASTOS):
        filtros['tipo'] = 'Sa√≠da'
    elif any(palavra in texto_lower for palavra in PALAVRAS_RECEITAS):
        filtros['tipo'] = 'Entrada'
    
    # --- Filtro de DATA ---
    hoje = datetime.now()
    if "m√™s passado" in texto_lower:
        primeiro_dia_mes_passado = (hoje.replace(day=1) - timedelta(days=1)).replace(day=1)
        ultimo_dia_mes_passado = hoje.replace(day=1) - timedelta(days=1)
        filtros['data_inicio'] = primeiro_dia_mes_passado.replace(hour=0, minute=0, second=0)
        filtros['data_fim'] = ultimo_dia_mes_passado.replace(hour=23, minute=59, second=59)
    # ... (outros filtros de data)

    # --- L√ìGICA UNIFICADA PARA CONTA E FORMA DE PAGAMENTO ---
    filtro_conta_encontrado = False
    contas_usuario = db.query(Conta).filter(Conta.id_usuario == user_id).all()
    
    for conta in contas_usuario:
        padrao_conta = r'\b' + re.escape(conta.nome.lower()) + r'\b'
        if re.search(padrao_conta, texto_lower):
            filtros['id_conta'] = conta.id
            filtro_conta_encontrado = True
            logging.info(f"Filtro de CONTA espec√≠fica detectado: '{conta.nome}' (ID: {conta.id})")
            break 
    
    if not filtro_conta_encontrado:
        for fp in formas_pagamento_comuns: # Agora a vari√°vel j√° existe
            padrao_fp = r'\b' + re.escape(fp) + r'\b'
            if fp == 'cr√©dito' and 'cart√£o' not in texto_lower:
                continue
            if re.search(padrao_fp, texto_lower):
                filtros['forma_pagamento'] = fp
                logging.info(f"Filtro de FORMA DE PAGAMENTO gen√©rica detectado: '{fp}'")
                break

    # --- Filtro de CATEGORIA ---
    categorias_comuns = ['lazer', 'alimenta√ß√£o', 'transporte', 'moradia', 'sa√∫de', 'receitas', 'compras']
    for cat in categorias_comuns:
        padrao_cat = r'\b' + re.escape(cat) + r'\b'
        if re.search(padrao_cat, texto_lower):
            filtros['categoria_nome'] = cat
            break
            
    # --- Filtro de busca por texto geral (QUERY) ---
    match = re.search(r'com\s+([a-zA-Z0-9√ß√£√°√©√≠√≥√∫√¢√™√¥\s]+)', texto_lower)
    if match:
        termo_busca = match.group(1).strip()
        # A vari√°vel 'formas_pagamento_comuns' agora est√° sempre acess√≠vel
        eh_fp_ou_conta = any(fp in termo_busca for fp in formas_pagamento_comuns) or \
                         any(conta.nome.lower() in termo_busca for conta in contas_usuario)
        
        if not eh_fp_ou_conta:
             filtros['query'] = termo_busca
             logging.info(f"Filtro de QUERY por texto detectado: '{termo_busca}'")

    return filtros

def _limpar_resposta_ia(texto: str) -> str:
    """Remove os blocos de c√≥digo markdown que a IA √†s vezes adiciona."""
    # Remove ```html, ```json, ```
    texto_limpo = re.sub(r'^```(html|json)?\n', '', texto, flags=re.MULTILINE)
    texto_limpo = re.sub(r'```$', '', texto_limpo, flags=re.MULTILINE)
    return texto_limpo.strip()

async def enviar_resposta_erro(bot, user_id):
    """Envia uma mensagem de erro amig√°vel e aleat√≥ria para o usu√°rio."""
    mensagens_erro = [
        "Ops! Meu c√©rebro deu uma pane. Tenta de novo? ü§ñ",
        "Eita! Algo deu errado aqui. Pode repetir a pergunta? üòÖ",
        "Hmm, parece que travei. Fala de novo a√≠! üîÑ"
    ]
    try:
        await bot.send_message(chat_id=user_id, text=random.choice(mensagens_erro))
    except Exception as e:
        logger.error(f"Falha ao enviar mensagem de erro para o usu√°rio {user_id}: {e}")

async def handle_lista_lancamentos(chat_id: int, context: ContextTypes.DEFAULT_TYPE, parametros: dict):
    """
    Busca e exibe uma lista de lan√ßamentos com base nos par√¢metros recebidos da IA.
    """
    logger.info(f"Executando handle_lista_lancamentos com par√¢metros: {parametros}")
    db = next(get_db())
    try:
        # A fun√ß√£o buscar_lancamentos_usuario j√° aceita esses par√¢metros nomeados
        lancamentos = buscar_lancamentos_usuario(telegram_user_id=chat_id, **parametros)
        
        if not lancamentos:
            await context.bot.send_message(chat_id, "N√£o encontrei nenhum lan√ßamento com os filtros que voc√™ pediu.")
            return

        limit = parametros.get('limit', len(lancamentos))
        resposta_final = f"Encontrei {len(lancamentos)} lan√ßamento(s) com os crit√©rios que voc√™ pediu:\n\n"
        
        cards_formatados = [formatar_lancamento_detalhado(lanc) for lanc in lancamentos]
        resposta_final += "\n\n".join(cards_formatados)

        await enviar_texto_em_blocos(context.bot, chat_id, resposta_final)
        
    finally:
        db.close()

async def handle_action_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Processa cliques em bot√µes de a√ß√£o gerados pela IA."""
    query = update.callback_query
    await query.answer()

    pergunta_simulada = query.data.replace("_", " ").capitalize()
    logger.info(f"Bot√£o de a√ß√£o clicado. Pergunta simulada para a IA: '{pergunta_simulada}'")
    
    if pergunta_simulada:
        await query.message.delete()
        # Chama a fun√ß√£o principal de linguagem natural, passando a query e a pergunta simulada.
        await handle_natural_language(update, context, custom_question=pergunta_simulada)
            
    return AWAIT_GERENTE_QUESTION


async def handle_conversacional(update: Update, context: ContextTypes.DEFAULT_TYPE, user_question: str, usuario_db: Usuario, contexto: ContextoConversa):
    """
    Lida com sauda√ß√µes e intera√ß√µes casuais.
    """
    user_name = usuario_db.nome_completo.split(' ')[0] if usuario_db.nome_completo else "amigo"
    
    respostas = {
        "saudacao": [
            f"Ol√°, {user_name}! Como posso te ajudar a organizar suas finan√ßas hoje?",
            f"E a√≠, {user_name}! Pronto pra deixar as contas em dia?",
            f"Opa, {user_name}! O que manda?"
        ],
        "agradecimento": [
            "De nada! Se precisar de mais alguma coisa, √© s√≥ chamar.",
            "Disponha! Estou aqui pra isso.",
            "Tranquilo! Qualquer coisa, t√¥ na √°rea."
        ],
        "despedida": [
            "At√© mais! Precisando, √© s√≥ chamar.",
            "Falou! Se cuida.",
            "Tchau, tchau! Boas economias!"
        ]
    }
    
    pergunta_lower = user_question.lower()
    resposta_final = ""

    if any(s in pergunta_lower for s in ['oi', 'ol√°', 'bom dia', 'boa tarde', 'boa noite', 'tudo bem', 'blz', 'e a√≠']):
        resposta_final = random.choice(respostas['saudacao'])
    elif any(s in pergunta_lower for s in ['obrigado', 'vlw', 'valeu', 'obg']):
        resposta_final = random.choice(respostas['agradecimento'])
    elif any(s in pergunta_lower for s in ['tchau', 'at√© mais', 'falou']):
        resposta_final = random.choice(respostas['despedida'])
    else:
        # Fallback para caso a inten√ß√£o seja conversacional, mas n√£o mapeada
        resposta_final = f"Entendido, {user_name}! Se tiver alguma pergunta espec√≠fica sobre suas finan√ßas, pode mandar."
        
    await update.message.reply_text(resposta_final)
    contexto.adicionar_interacao(user_question, resposta_final, "conversacional")

async def handle_maior_despesa(update, context, user_question, usuario_db, contexto, db):
    """Encontra e exibe o maior gasto em um per√≠odo."""
    filtros = _parse_filtros_lancamento(user_question)
    
    # For√ßa o tipo para 'Sa√≠da' e limita a 1 resultado
    filtros['tipo'] = 'Sa√≠da'
    
    # A busca agora √© por valor, n√£o por data
    maior_gasto = db.query(Lancamento).filter(
        Lancamento.id_usuario == usuario_db.id,
        Lancamento.tipo == 'Sa√≠da'
    )
    if filtros.get('data_inicio'):
        maior_gasto = maior_gasto.filter(Lancamento.data_transacao >= filtros['data_inicio'])
    if filtros.get('data_fim'):
        maior_gasto = maior_gasto.filter(Lancamento.data_transacao <= filtros['data_fim'])

    maior_gasto = maior_gasto.order_by(Lancamento.valor.desc()).first()

    if not maior_gasto:
        await update.message.reply_text("N√£o encontrei nenhuma despesa para o per√≠odo que voc√™ pediu.")
        return

    resposta_texto = (
        f"Sua maior despesa no per√≠odo foi:\n\n"
        f"{formatar_lancamento_detalhado(maior_gasto)}"
    )
    await enviar_texto_em_blocos(context.bot, usuario_db.telegram_id, resposta_texto)
    contexto.adicionar_interacao(user_question, f"Mostrou maior despesa: {maior_gasto.descricao}", "maior_despesa")


async def handle_analise_geral(update, context, user_question, usuario_db, contexto, db):
    tipo_filtro = None
    if any(palavra in user_question.lower() for palavra in ['gastei', 'gasto', 'despesa']):
        tipo_filtro = 'Sa√≠da'
    elif any(palavra in user_question.lower() for palavra in ['ganhei', 'recebi', 'receita']):
        tipo_filtro = 'Entrada'

    # --- MUDAN√áA: APLICAMOS O FILTRO DE CONTA AQUI TAMB√âM ---
    filtros_iniciais = _parse_filtros_lancamento(user_question, db, usuario_db.id)
    if tipo_filtro:
        filtros_iniciais['tipo'] = tipo_filtro

    # Buscamos todos os lan√ßamentos que correspondem aos filtros iniciais
    lancamentos = buscar_lancamentos_usuario(
        telegram_user_id=usuario_db.telegram_id,
        limit=200, # Pegamos um limite alto para a an√°lise
        **filtros_iniciais
    )
    
    if not lancamentos:
        await update.message.reply_text("N√£o encontrei nenhum lan√ßamento para sua pergunta.")
        return
    
     # --- NOVA L√ìGICA PARA DEFINIR O PER√çODO DA AN√ÅLISE ---
    data_mais_antiga = min(l.data_transacao for l in lancamentos)
    data_mais_recente = max(l.data_transacao for l in lancamentos)
    periodo_analise_str = f"de {data_mais_antiga.strftime('%d/%m/%Y')} a {data_mais_recente.strftime('%d/%m/%Y')}"
    # ---------------------------------------------------------

    # --- NOVO: PR√â-C√ÅLCULO DO VALOR TOTAL ---
    valor_total_calculado = sum(float(l.valor) for l in lancamentos)

    contexto_json = preparar_contexto_json(lancamentos)
    analise_comportamental = analisar_comportamento_financeiro(lancamentos)
    analise_json = json.dumps(analise_comportamental, indent=2, ensure_ascii=False)
    
    # Passamos o valor pr√©-calculado para o prompt
    prompt_usado = PROMPT_GERENTE_VDM.format(
        user_name=usuario_db.nome_completo or "voc√™",
        perfil_investidor=usuario_db.perfil_investidor or "N√£o definido",
        pergunta_usuario=user_question,
        contexto_json=contexto_json,
        analise_comportamental_json=analise_json,
        periodo_analise=periodo_analise_str,
        valor_total_pre_calculado=valor_total_calculado 
    )
    
    await gerar_resposta_ia(update, context, prompt_usado, user_question, usuario_db, contexto, "analise_geral")


async def gerar_resposta_ia(update, context, prompt, user_question, usuario_db, contexto, tipo_interacao):
    try:
        model = genai.GenerativeModel(config.GEMINI_MODEL_NAME)
        response = await model.generate_content_async(prompt)
        
        # --- NOVA L√ìGICA DE PROCESSAMENTO JSON (MAIS SEGURA) ---
        
        # 1. Tenta encontrar o bloco JSON na resposta da IA
        json_match = re.search(r'\{.*\}', response.text, re.DOTALL)
        
        # 2. Se N√ÉO encontrar um JSON, trata o erro elegantemente
        if not json_match:
            logger.error(f"A IA n√£o retornou um JSON v√°lido. Resposta recebida: {response.text}")
            # Usa a resposta em texto livre da IA como um fallback, se fizer sentido
            # ou envia uma mensagem de erro padr√£o.
            await update.message.reply_text(
                "Hmm, n√£o consegui estruturar a resposta. Aqui est√° o que a IA disse:\n\n"
                f"<i>{response.text}</i>",
                parse_mode='HTML'
            )
            # Adiciona ao contexto para n√£o perder o hist√≥rico
            contexto.adicionar_interacao(user_question, response.text, tipo_interacao)
            return # Sai da fun√ß√£o

        # 3. Se encontrou um JSON, tenta decodific√°-lo
        try:
            dados_ia = json.loads(json_match.group(0))
        except json.JSONDecodeError as e:
            logger.error(f"Erro ao decodificar JSON da IA: {e}\nString Tentada: {json_match.group(0)}")
            await enviar_resposta_erro(context.bot, usuario_db.telegram_id)
            return

        # 4. Se o JSON foi decodificado, monta a mensagem formatada
        # (O c√≥digo de formata√ß√£o que fizemos antes continua aqui, sem altera√ß√µes)
        titulo = dados_ia.get("titulo_resposta", "An√°lise R√°pida")
        valor_total = dados_ia.get("valor_total", 0.0)
        comentario = dados_ia.get("comentario_maestro", "Aqui est√° o que encontrei.")
        detalhamento = dados_ia.get("detalhamento", [])
        proximo_passo = dados_ia.get("proximo_passo", {})

        mensagem_formatada = f"<b>{titulo}</b>\n"
        mensagem_formatada += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        # Adiciona o valor total apenas se for maior que zero
        if valor_total > 0:
            mensagem_formatada += f"O valor total foi de <code>R$ {valor_total:.2f}</code>.\n\n"
        
        if detalhamento:
            mensagem_formatada += "Aqui est√° o detalhamento:\n"
            for item in detalhamento:
                emoji = item.get("emoji", "üîπ")
                nome_item = item.get("item", "N/A")
                valor_item = item.get("valor", 0.0)
                mensagem_formatada += f"{emoji} <b>{nome_item}:</b> <code>R$ {valor_item:.2f}</code>\n"
            mensagem_formatada += "\n"

        mensagem_formatada += f"<i>{comentario}</i>\n"

        keyboard = None
        if proximo_passo and proximo_passo.get("botao_texto"):
            mensagem_formatada += f"\nüí° <b>Pr√≥ximo Passo:</b> {proximo_passo.get('texto', '')}"
            keyboard = [[
                InlineKeyboardButton(
                    proximo_passo["botao_texto"], 
                    callback_data=proximo_passo["botao_callback"]
                )
            ]]
        
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

        await enviar_texto_em_blocos(
            context.bot, 
            usuario_db.telegram_id, 
            mensagem_formatada, 
            reply_markup=reply_markup
        )
        contexto.adicionar_interacao(user_question, mensagem_formatada, tipo_interacao)
        
    except Exception as e:
        logger.error(f"Erro geral e inesperado em gerar_resposta_ia: {e}", exc_info=True)
        await enviar_resposta_erro(context.bot, usuario_db.telegram_id)

# --- HANDLER PARA CALLBACK DE AN√ÅLISE DE IMPACTO ---

async def handle_analise_impacto_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Processa o clique no bot√£o "Como isso me afeta?", busca dados financeiros
    do usu√°rio, gera e envia uma an√°lise de impacto personalizada usando a IA.
    """
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    if not callback_data.startswith("analise_"):
        return
    
    tipo_dado = callback_data.replace("analise_", "")
    
    db = next(get_db())
    try:
        user_info = query.from_user
        usuario_db = get_or_create_user(db, user_info.id, user_info.full_name)
        
        # Edita a mensagem para dar feedback ao usu√°rio
        await query.edit_message_text("Analisando o impacto para voc√™... üß†")
        
        # Busca os dados externos (cota√ß√£o, etc.)
        dados_externos = await obter_dados_externos(tipo_dado)
        informacao_externa = dados_externos.get("texto_html", "Informa√ß√£o n√£o dispon√≠vel")
        
        # Busca o contexto financeiro do usu√°rio
        lancamentos = buscar_lancamentos_com_relacionamentos(db, usuario_db.telegram_id)
        contexto_json = services.preparar_contexto_json(lancamentos)
        
        # Monta o prompt para a IA
        prompt_impacto = PROMPT_ANALISE_IMPACTO.format(
            user_name=usuario_db.nome_completo or "voc√™",
            perfil_investidor=usuario_db.perfil_investidor or "N√£o definido",
            informacao_externa=informacao_externa,
            contexto_json=contexto_json
        )
        
        # Chama a IA para gerar a an√°lise
        model = genai.GenerativeModel(config.GEMINI_MODEL_NAME)
        response = await model.generate_content_async(prompt_impacto)
        resposta_bruta = response.text
        resposta_limpa = _limpar_resposta_ia(resposta_bruta)
        
        
        # 2. Envia a resposta limpa para o usu√°rio.
        await query.edit_message_text(
            text=resposta_limpa,  # <--- Usa a vari√°vel corrigida
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Erro na an√°lise de impacto: {e}", exc_info=True)
        # Envia uma mensagem de erro amig√°vel se algo der errado
        await query.edit_message_text(
            text="üòÖ Ops! N√£o consegui gerar a an√°lise de impacto. Tente novamente mais tarde.",
            parse_mode='HTML'
        )
    finally:
        db.close()


        

# --- FUN√á√ïES CRIADORAS DE CONVERSATION HANDLER ---

def create_gerente_conversation_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("gerente", start_gerente)],
        states={
            AWAIT_GERENTE_QUESTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_natural_language),
                
                # Handler antigo para os bot√µes de an√°lise de impacto
                CallbackQueryHandler(handle_analise_impacto_callback, pattern=r"^analise_"),
                
                # --- NOVA LINHA ADICIONADA ---
                # Handler novo e mais gen√©rico para os bot√µes de a√ß√£o da IA
                # Ele vai capturar qualquer callback que N√ÉO comece com "analise_"
                CallbackQueryHandler(handle_action_button_callback, pattern=r"^(?!analise_).+")
            ],
        },
        fallbacks=[
            CommandHandler("cancelar", cancel)
        ],
        per_chat=True,
        allow_reentry=True
    )

def create_onboarding_conversation_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name)],
        },
        fallbacks=[CommandHandler("cancelar", cancel)],
        per_chat=True
    )